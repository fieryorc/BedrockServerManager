// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package svrmgr is a generated GoMock package.
package svrmgr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetHandler mocks base method.
func (m *MockProvider) GetHandler(cmd string) (Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandler", cmd)
	ret0, _ := ret[0].(Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHandler indicates an expected call of GetHandler.
func (mr *MockProviderMockRecorder) GetHandler(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandler", reflect.TypeOf((*MockProvider)(nil).GetHandler), cmd)
}

// GetServerProcess mocks base method.
func (m *MockProvider) GetServerProcess() ServerProcess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerProcess")
	ret0, _ := ret[0].(ServerProcess)
	return ret0
}

// GetServerProcess indicates an expected call of GetServerProcess.
func (mr *MockProviderMockRecorder) GetServerProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerProcess", reflect.TypeOf((*MockProvider)(nil).GetServerProcess))
}

// GitWrapper mocks base method.
func (m *MockProvider) GitWrapper() GitWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitWrapper")
	ret0, _ := ret[0].(GitWrapper)
	return ret0
}

// GitWrapper indicates an expected call of GitWrapper.
func (mr *MockProviderMockRecorder) GitWrapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitWrapper", reflect.TypeOf((*MockProvider)(nil).GitWrapper))
}

// InitServer mocks base method.
func (m *MockProvider) InitServer(ctx context.Context, path, cwd string, args []string) ServerProcess {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitServer", ctx, path, cwd, args)
	ret0, _ := ret[0].(ServerProcess)
	return ret0
}

// InitServer indicates an expected call of InitServer.
func (mr *MockProviderMockRecorder) InitServer(ctx, path, cwd, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitServer", reflect.TypeOf((*MockProvider)(nil).InitServer), ctx, path, cwd, args)
}

// Log mocks base method.
func (m *MockProvider) Log(line string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", line)
}

// Log indicates an expected call of Log.
func (mr *MockProviderMockRecorder) Log(line interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockProvider)(nil).Log), line)
}

// Printf mocks base method.
func (m *MockProvider) Printf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockProviderMockRecorder) Printf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockProvider)(nil).Printf), varargs...)
}

// Printfln mocks base method.
func (m *MockProvider) Printfln(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printfln", varargs...)
}

// Printfln indicates an expected call of Printfln.
func (mr *MockProviderMockRecorder) Printfln(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printfln", reflect.TypeOf((*MockProvider)(nil).Printfln), varargs...)
}

// Println mocks base method.
func (m *MockProvider) Println(str string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Println", str)
}

// Println indicates an expected call of Println.
func (mr *MockProviderMockRecorder) Println(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockProvider)(nil).Println), str)
}

// RunCommand mocks base method.
func (m *MockProvider) RunCommand(ctx context.Context, cmd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockProviderMockRecorder) RunCommand(ctx, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockProvider)(nil).RunCommand), ctx, cmd)
}
